# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CheckOtpTokenInput {
  token: String!
}

type GqlAuth {
  accessToken: String!
  refreshToken: String!
}

type GqlHealth {
  details: GqlHealthInfo!
  errors: GqlHealthInfo
  info: GqlHealthInfo!
  status: String!
}

type GqlHealthInfo {
  prisma: GqlHealthInfoDetail
  rabbitmq: GqlHealthInfoDetail
  redis: GqlHealthInfoDetail
}

type GqlHealthInfoDetail {
  status: String!
}

type GqlResult {
  success: Boolean!
}

type GqlSignup {
  token: String!
}

type GqlUser {
  email: String!
  id: Float!
  profile: GqlUserProfile!
  profileId: Float!
  role: UserRole!
  status: UserStatus!
  username: String
}

type GqlUserProfile {
  avatar: String
  firstname: String
  headline: String
  id: Float!
  intro: String
  lastname: String
}

type GqlVerifyOtp {
  user: GqlUser!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  login(data: LoginInput!): GqlAuth!
  refresh: GqlAuth!
  resendOtp(data: CheckOtpTokenInput!): GqlSignup!
  signout(refreshToken: String!): String!
  signup(data: SignUpInput!): GqlSignup!
}

type Query {
  checkOtpToken(data: CheckOtpTokenInput!): GqlResult!
  getHello: String!
  healthReady: GqlHealth!
  me: GqlUser!
  verifyOtp(data: VerifyOtpInput!): GqlVerifyOtp!
}

input SignUpInput {
  email: String!
  password: String!
  role: UserSignupRole!
  username: String
}

enum UserRole {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum UserSignupRole {
  INSTRUCTOR
  STUDENT
}

enum UserStatus {
  ACTIVE
  BANNED
  PENDING
}

input VerifyOtpInput {
  otp: String!
  token: String!
}